<?php

declare(strict_types=1);

/*
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerPetstoreLib;

use SwaggerPetstoreLib\Controllers;

/**
 * SwaggerPetstoreLib client class
 */
class SwaggerPetstoreClient implements ConfigurationInterface
{
    private $pet;
    private $store;
    private $user;

    private $timeout = ConfigurationDefaults::TIMEOUT;
    private $enableRetries = ConfigurationDefaults::ENABLE_RETRIES;
    private $numberOfRetries = ConfigurationDefaults::NUMBER_OF_RETRIES;
    private $retryInterval = ConfigurationDefaults::RETRY_INTERVAL;
    private $backOffFactor = ConfigurationDefaults::BACK_OFF_FACTOR;
    private $maximumRetryWaitTime = ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    private $retryOnTimeout = ConfigurationDefaults::RETRY_ON_TIMEOUT;
    private $httpStatusCodesToRetry = ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    private $httpMethodsToRetry = ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    private $environment = ConfigurationDefaults::ENVIRONMENT;
    private $oAuthClientId = ConfigurationDefaults::O_AUTH_CLIENT_ID;
    private $oAuthRedirectUri = ConfigurationDefaults::O_AUTH_REDIRECT_URI;
    private $oAuthToken = ConfigurationDefaults::O_AUTH_TOKEN;
    private $oAuthScopes = ConfigurationDefaults::O_AUTH_SCOPES;
    private $implicitAuthManager;
    private $authManagers = [];
    private $httpCallback;

    public function __construct(array $configOptions = null)
    {
        if (isset($configOptions['timeout'])) {
            $this->timeout = $configOptions['timeout'];
        }
        if (isset($configOptions['enableRetries'])) {
            $this->enableRetries = $configOptions['enableRetries'];
        }
        if (isset($configOptions['numberOfRetries'])) {
            $this->numberOfRetries = $configOptions['numberOfRetries'];
        }
        if (isset($configOptions['retryInterval'])) {
            $this->retryInterval = $configOptions['retryInterval'];
        }
        if (isset($configOptions['backOffFactor'])) {
            $this->backOffFactor = $configOptions['backOffFactor'];
        }
        if (isset($configOptions['maximumRetryWaitTime'])) {
            $this->maximumRetryWaitTime = $configOptions['maximumRetryWaitTime'];
        }
        if (isset($configOptions['retryOnTimeout'])) {
            $this->retryOnTimeout = $configOptions['retryOnTimeout'];
        }
        if (isset($configOptions['httpStatusCodesToRetry'])) {
            $this->httpStatusCodesToRetry = $configOptions['httpStatusCodesToRetry'];
        }
        if (isset($configOptions['httpMethodsToRetry'])) {
            $this->httpMethodsToRetry = $configOptions['httpMethodsToRetry'];
        }
        if (isset($configOptions['environment'])) {
            $this->environment = $configOptions['environment'];
        }
        if (isset($configOptions['oAuthClientId'])) {
            $this->oAuthClientId = $configOptions['oAuthClientId'];
        }
        if (isset($configOptions['oAuthRedirectUri'])) {
            $this->oAuthRedirectUri = $configOptions['oAuthRedirectUri'];
        }
        if (isset($configOptions['oAuthToken'])) {
            $this->oAuthToken = clone $configOptions['oAuthToken'];
        }
        if (isset($configOptions['oAuthScopes'])) {
            $this->oAuthScopes = $configOptions['oAuthScopes'];
        }
        if (isset($configOptions['httpCallback'])) {
            $this->httpCallback = $configOptions['httpCallback'];
        }

        $this->implicitAuthManager = new ImplicitAuthManager(
            $this->oAuthClientId,
            $this->oAuthRedirectUri,
            $this->oAuthToken,
            $this->oAuthScopes,
            $this
        );
        $this->authManagers['global'] = $this->implicitAuthManager;
    }

    /**
     * Get the client configuration as an associative array
     */
    public function getConfiguration(): array
    {
        $configMap = [];

        if (isset($this->timeout)) {
            $configMap['timeout'] = $this->timeout;
        }
        if (isset($this->enableRetries)) {
            $configMap['enableRetries'] = $this->enableRetries;
        }
        if (isset($this->numberOfRetries)) {
            $configMap['numberOfRetries'] = $this->numberOfRetries;
        }
        if (isset($this->retryInterval)) {
            $configMap['retryInterval'] = $this->retryInterval;
        }
        if (isset($this->backOffFactor)) {
            $configMap['backOffFactor'] = $this->backOffFactor;
        }
        if (isset($this->maximumRetryWaitTime)) {
            $configMap['maximumRetryWaitTime'] = $this->maximumRetryWaitTime;
        }
        if (isset($this->retryOnTimeout)) {
            $configMap['retryOnTimeout'] = $this->retryOnTimeout;
        }
        if (isset($this->httpStatusCodesToRetry)) {
            $configMap['httpStatusCodesToRetry'] = $this->httpStatusCodesToRetry;
        }
        if (isset($this->httpMethodsToRetry)) {
            $configMap['httpMethodsToRetry'] = $this->httpMethodsToRetry;
        }
        if (isset($this->environment)) {
            $configMap['environment'] = $this->environment;
        }
        if ($this->implicitAuthManager->getOAuthClientId() !== null) {
            $configMap['oAuthClientId'] = $this->implicitAuthManager->getOAuthClientId();
        }
        if ($this->implicitAuthManager->getOAuthRedirectUri() !== null) {
            $configMap['oAuthRedirectUri'] = $this->implicitAuthManager->getOAuthRedirectUri();
        }
        if ($this->implicitAuthManager->getOAuthToken() !== null) {
            $configMap['oAuthToken'] = clone $this->implicitAuthManager->getOAuthToken();
        }
        if ($this->implicitAuthManager->getOAuthScopes() !== null) {
            $configMap['oAuthScopes'] = $this->implicitAuthManager->getOAuthScopes();
        }
        if (isset($this->httpCallback)) {
            $configMap['httpCallback'] = $this->httpCallback;
        }

        return $configMap;
    }

    /**
     * Clone this client and override given configuration options
     */
    public function withConfiguration(array $configOptions): self
    {
        return new self(\array_merge($this->getConfiguration(), $configOptions));
    }

    public function getTimeout(): int
    {
        return $this->timeout;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->enableRetries;
    }

    public function getNumberOfRetries(): int
    {
        return $this->numberOfRetries;
    }

    public function getRetryInterval(): float
    {
        return $this->retryInterval;
    }

    public function getBackOffFactor(): float
    {
        return $this->backOffFactor;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->maximumRetryWaitTime;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->retryOnTimeout;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->httpStatusCodesToRetry;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->httpMethodsToRetry;
    }

    public function getEnvironment(): string
    {
        return $this->environment;
    }

    public function getImplicitAuth(): ?ImplicitAuth
    {
        return $this->implicitAuthManager;
    }

    /**
     * Get the base uri for a given server in the current environment
     *
     * @param  string $server Server name
     *
     * @return string         Base URI
     */
    public function getBaseUri(string $server = Server::SERVER1): string
    {
        return static::ENVIRONMENT_MAP[$this->environment][$server];
    }

    /**
     * Returns Pet Controller
     */
    public function getPetController(): Controllers\PetController
    {
        if ($this->pet == null) {
            $this->pet = new Controllers\PetController($this, $this->authManagers, $this->httpCallback);
        }
        return $this->pet;
    }

    /**
     * Returns Store Controller
     */
    public function getStoreController(): Controllers\StoreController
    {
        if ($this->store == null) {
            $this->store = new Controllers\StoreController($this, $this->authManagers, $this->httpCallback);
        }
        return $this->store;
    }

    /**
     * Returns User Controller
     */
    public function getUserController(): Controllers\UserController
    {
        if ($this->user == null) {
            $this->user = new Controllers\UserController($this, $this->authManagers, $this->httpCallback);
        }
        return $this->user;
    }

    /**
     * A map of all baseurls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::SERVER1 => 'https://petstore.swagger.io/v2',
            Server::SERVER2 => 'http://petstore.swagger.io/v2',
            Server::AUTH_SERVER => 'https://petstore.swagger.io/oauth',
        ],
    ];
}
