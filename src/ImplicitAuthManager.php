<?php

declare(strict_types=1);

/*
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SwaggerPetstoreLib;

use SwaggerPetstoreLib\Http\HttpRequest;
use SwaggerPetstoreLib\Models\OAuthToken;
use Unirest\Request;

/**
 * Utility class for OAuth 2 authorization and token management
 */
class ImplicitAuthManager implements AuthManagerInterface, ImplicitAuth
{
    private $config;

    private $oAuthClientId;

    private $oAuthRedirectUri;

    private $oAuthToken;

    private $oAuthScopes;

    /**
     * Returns an instance of this class.
     *
     * @param string $oAuthClientId OAuth 2 Client ID
     * @param string $oAuthRedirectUri OAuth 2 Redirection endpoint or Callback Uri
     * @param OAuthToken|null $oAuthToken Object for storing information about the OAuth token
     * @param string[]|null $oAuthScopes
     */
    public function __construct(
        string $oAuthClientId,
        string $oAuthRedirectUri,
        ?OAuthToken $oAuthToken,
        ?array $oAuthScopes,
        ConfigurationInterface $config
    ) {
        $this->config = $config;
        $this->oAuthClientId = $oAuthClientId;
        $this->oAuthRedirectUri = $oAuthRedirectUri;
        $this->oAuthToken = $oAuthToken;
        $this->oAuthScopes = $oAuthScopes;
    }

    /**
     * String value for oAuthClientId.
     */
    public function getOAuthClientId(): string
    {
        return $this->oAuthClientId;
    }

    /**
     * String value for oAuthRedirectUri.
     */
    public function getOAuthRedirectUri(): string
    {
        return $this->oAuthRedirectUri;
    }

    /**
     * OAuthToken value for oAuthToken.
     */
    public function getOAuthToken(): ?OAuthToken
    {
        return $this->oAuthToken;
    }

    /**
     * OAuthScopeEnum value for oAuthScopes.
     */
    public function getOAuthScopes(): ?array
    {
        return $this->oAuthScopes;
    }

    /**
     * Checks if provided credentials match with existing ones.
     *
     * @param string $oAuthClientId OAuth 2 Client ID
     * @param string $oAuthRedirectUri OAuth 2 Redirection endpoint or Callback Uri
     */
    public function equals(string $oAuthClientId, string $oAuthRedirectUri): bool
    {
        return $oAuthClientId == $this->oAuthClientId &&
            $oAuthRedirectUri == $this->oAuthRedirectUri;
    }

    /**
     * Build an authorization URL for taking the user's consent to access data.
     * @param  string|null       $state            An opaque state string
     * @param  array|null        $additionalParams Additional parameters to add the the authorization URL
     */
    public function buildAuthorizationUrl(?string $state = null, ?array $additionalParams = null): string
    {
        //the base uri for api requests
        $queryBuilder = $this->config->getBaseUri(Server::AUTH_SERVER);

        //prepare query string for API call
        $queryBuilder .= '/authorize';

        //build query params
        $queryParams = [
            'response_type' => 'token',
            'client_id'     => $this->oAuthClientId,
            'redirect_uri'  => $this->oAuthRedirectUri,
            'scope'         => implode(' ', $this->oAuthScopes ?? []),
            'state'         => $state
        ];

        if ($additionalParams != null && is_array($additionalParams)) {
            $queryParams = array_merge($additionalParams, $queryParams);
        }

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($queryBuilder, $queryParams);

        //validate and preprocess url
        return Request::validateUrl($queryBuilder);
    }

    /**
     * Has the OAuth token expired?
     */
    public function isTokenExpired(): bool
    {
        return $this->oAuthToken->getExpiry() == null ||
            $this->oAuthToken->getExpiry() < time();
    }

    /**
     * Check if client is authorized, throws exceptions when token is null or expired.
     */
    private function checkAuthorization(): void
    {
        if ($this->oAuthToken == null) {
            throw new \Exception('Client is not authorized. An OAuth token is needed to make API calls.');
        }

        if ($this->isTokenExpired()) {
            throw new \Exception('OAuth token is expired. A valid token is needed to make API calls.');
        }
    }

    /**
     * Adds authentication to the given HttpRequest.
     */
    public function apply(HttpRequest $httpRequest)
    {
        $this->checkAuthorization();
        $httpRequest->addHeader('Authorization', 'Bearer ' . $this->oAuthToken->getAccessToken());
    }
}
